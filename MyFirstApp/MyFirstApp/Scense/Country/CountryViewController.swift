//
//  CountryViewController.swift
//  MyFirstApp
//
//  Created by Xiaobei Zhu on 2021/1/6.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CountryDisplayLogic: class {
    func displayCountryInformationDEtail(viewModel: [String:[String: Int]])
}

class CountryViewController: UIViewController, CountryDisplayLogic {
    
    // MARK: - Properties
    var interactor: CountryBusinessLogic?
    var router: CountryRouterInput?
    var countryPlan: [String:[String: Int]] = [:]
    var phoneTraffic = [Int]()
    var trafficDuration = [Int]()
    var price = [Int]()
    var perPrice = [Int]()
    var selectedIndex: Int?
    // Mark: - Outlets
    
    //@IBOutlet weak var nameTextField: UITextField!
    @IBOutlet weak var collectionView: UICollectionView!
    
    @IBOutlet weak var checkoutButton: UIButton!
    // MARK: - Object Lifecycle
    
    override func awakeFromNib() {
        super.awakeFromNib()
        CountryConfigurator.sharedInstance.configure(self)
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        interactor?.countryInformation(request: Country.CountryInformationDetail.Request())
        
    }
    
    // MARK: - Do something
    
  
    @IBAction func checkoutButtonPress(_ sender: Any) {
        router?.showOrderViewController(countryName: "AA")
    }
    
    func displayCountryInformationDEtail(viewModel:  [String:[String: Int]]) {
        let country = viewModel
        countryPlan = country
        
        print("xiaoxiaobeibei++++ \(countryPlan)")
        getCellData(countryPlan: countryPlan)
//        collectionView.reloadData()
        //nameTextField.text = viewModel.name
    }
}
extension CountryViewController:UICollectionViewDelegate, UICollectionViewDataSource{
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        countryPlan.count
    }
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "Cell", for: indexPath) as! CountryCollectionViewCell
        cell.phoneTrafficLabel.text = "\(String(describing: phoneTraffic[indexPath.row])) GB"
        cell.TrafficDuration.text = "\(String(describing: trafficDuration[indexPath.row])) Days"
        cell.priceLabel.text = "$\(String(describing: price[indexPath.row]))"
        let perPrice = price[indexPath.row] / phoneTraffic[indexPath.row]
        cell.perGBPriceLabel.text = "$\(String(describing: perPrice))/GB"
        if indexPath.row == selectedIndex{
            cell.checkboxImage.image = UIImage(named: "CheckboxStyleCopy-1")
            cell.checkBoxRight.image = UIImage(named: "checkBoxRight")
            cell.maskImage.image = UIImage(named: "Mask-1")

        }else{
    
            cell.checkboxImage.image = UIImage(named: "Checkbox Style Copy")
            cell.maskImage.image = UIImage(named: "Mask")
    
            
        }
        return cell
        
    }
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        selectCollection(index: indexPath)
        collectionView.reloadData()
        checkoutButton.backgroundColor = UIColor(named: "Enable ButtonColor")
        checkoutButton.setTitleColor(UIColor(named: "White Color"), for: .normal)
        checkoutButton.isEnabled = true
        checkoutButton.setTitle("Checkout $ \(price[indexPath.row]) ", for: .normal)
    }
    func selectCollection(index: IndexPath){
        selectedIndex = index.row
        
    }
    func getCellData(countryPlan: [String:[String: Int]]){
        for (_, planValue) in countryPlan {
            phoneTraffic.append(planValue["phoneTraffic"]!)
            trafficDuration.append(planValue["trafficDuration"]!)
            price.append(planValue["price"]!)
        }
        collectionView.reloadData()
    }

}
