//
//  SignUpWithEmailViewController.swift
//  MyFirstApp
//
//  Created by Xiaobei Zhu on 2020/12/28.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SignUpWithEmailDisplayLogic: class {
    func displayEmailHintMessage(result: String)
    func displayEmailMessage(result: String)
    func displayPasswordHintMessage(result: NSAttributedString)
    func displayPasswordMessage(result: String)
    func displayGood()
    func displayNoMessage()
//    func displayVerifyPasswordFormatResult(viewModel: PasswordVerification.VerifyPasswordFormat.ViewModel)
}

class SignUpWithEmailViewController: UIViewController, SignUpWithEmailDisplayLogic {
    func displayPasswordHintMessage(result: NSAttributedString) {
        passwordHintMessageLabel.isHidden = false
        passwordHintMessageLabel.attributedText = result
        emailHintMessageLabel.isHidden = true
        passwordMessageLabel.isHidden = true
        emailMessageLabel.isHidden = true
        emailPointView.isHidden = true
        passwordPointView.isHidden = true
    }
    
    func displayGood() {
        emailMessageLabel.isHidden = true
        emailPointView.isHidden = true
        passwordMessageLabel.isHidden = true
        passwordPointView.isHidden = true
        passwordHintMessageLabel.isHidden = true
        emailHintMessageLabel.isHidden = true
        continueButton.isEnabled = true
        continueButton.setTitleColor(.white, for: .normal)
        continueButton.backgroundColor = UIColor(named: "Enable ButtonColor")
//        router?.
    }
    
    func displayNoMessage() {
        emailMessageLabel.isHidden = true
        emailPointView.isHidden = true
        passwordMessageLabel.isHidden = true
        passwordPointView.isHidden = true
        passwordHintMessageLabel.isHidden = true
        emailHintMessageLabel.isHidden = true
    }
    
    func displayPasswordMessage(result: String) {
        passwordMessageLabel.isHidden = false
        passwordPointView.isHidden = false
//        emailPointView.isHidden = true
//        emailMessageLabel.isHidden = true
        emailHintMessageLabel.isHidden = true
        passwordHintMessageLabel.isHidden = true
        passwordMessageLabel.text = result
        passwordLabel.textColor = UIColor(named: "SignUpWithEmailYellow")
    }
    
    func displayEmailHintMessage(result: String) {
        emailHintMessageLabel.isHidden = false
        emailHintMessageLabel.text = result
        emailMessageLabel.isHidden = true
        emailPointView.isHidden = true
        passwordMessageLabel.isHidden = true
        passwordPointView.isHidden = true
        passwordHintMessageLabel.isHidden = true
        
    }
    
    func displayEmailMessage(result: String) {
        
        emailAddressLabel.textColor = UIColor(named: "SignUpWithEmailYellow")
        emailMessageLabel.isHidden = false
        emailPointView.isHidden = false
        emailMessageLabel.text = result
        passwordMessageLabel.isHidden = true
        passwordPointView.isHidden = true
        passwordHintMessageLabel.isHidden = true
        emailHintMessageLabel.isHidden = true
    }
    
    
    
    // MARK: - Properties
    var interactor: SignUpWithEmailBusinessLogic?
    var router: SignUpWithEmailRouterInput?
    let signUpwithEmail = ["Email Address","Password"]
    var clickButton: Bool = true
    // Mark: - Outlets

    //@IBOutlet weak var nameTextField: UITextField!
    
    @IBOutlet var passwordLabel: UILabel!
    @IBOutlet var emailAddressLabel: UILabel!
    @IBOutlet weak var continueButton: UIButton!
    @IBOutlet weak var emailAddressButton: UIButton!
    @IBOutlet weak var emailAddressTextField: UITextField!
    @IBOutlet weak var passwordTextField: UITextField!
    @IBOutlet weak var emailHintMessageLabel: UILabel!
    @IBOutlet weak var passwordHintMessageLabel: UILabel!
    @IBOutlet weak var emailPointView: UIView!
    @IBOutlet weak var passwordPointView: UIView!
    @IBOutlet weak var passwordMessageLabel: UILabel!
    @IBOutlet weak var showButton: UIButton!
    @IBOutlet weak var emailMessageLabel: UILabel!
    
    // MARK: - Object Lifecycle

    override func awakeFromNib() {
        super.awakeFromNib()
        SignUpWithEmailConfigurator.sharedInstance.configure(self)
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
//        tableView.reloadData()
        
        
    }
    

    // MARK: - Do something
    override var preferredStatusBarStyle: UIStatusBarStyle {
        return .lightContent
    }
    
    override func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?) {
        view.endEditing(true)
    }
    @IBAction func returnButtonPress(_ sender: Any) {
        router?.showNewScreen()
    }
    
    @IBAction func emailLabelButtonClicked(_ sender: Any) {
        emailAddressLabel.font = UIFont(name: "Nexa-XBold", size: 12)
        emailAddressTextField.isHidden = false
        emailAddressTextField.becomeFirstResponder()
    }
    
    @IBAction func passwordLabelButtonClicked(_ sender: Any) {
        passwordTextField.becomeFirstResponder()
        passwordLabel.font = UIFont(name: "Nexa-XBold", size: 12)
        passwordTextField.isHidden = false
    }
    @IBAction func emailTextFieldEndEdit(_ sender: Any) {
        let passwordIsEditing = passwordTextField.isEditing
        let EmailAddressIsEditing = emailAddressTextField.isEditing
        interactor?.verifyEmailPasswod(request: Verification.VerifyEmailPassword.Request(isEmailEntering: EmailAddressIsEditing, emailAddress: emailAddressTextField.text ?? "", isPasswordEntering: passwordIsEditing, password: passwordTextField.text ?? ""))
    }
    @IBAction func emailAddressTextField(_ sender: Any) {
        emailHintMessageLabel.isHidden = false
        passwordHintMessageLabel.isHidden = true
        emailAddressTextField.becomeFirstResponder()
        emailAddressLabel.textColor = UIColor(named: "SearchSectionTextColor")
        passwordLabel.textColor = UIColor(named: "SearchSectionTextColor")
        let passwordIsEditing = passwordTextField.isEditing
        let EmailAddressIsEditing = emailAddressTextField.isEditing
        interactor?.verifyEmailPasswod(request: Verification.VerifyEmailPassword.Request(isEmailEntering: EmailAddressIsEditing, emailAddress: emailAddressTextField.text ?? "", isPasswordEntering: passwordIsEditing, password: passwordTextField.text ?? ""))
    }
    
 
    @IBAction func passwordTextFieldEndEdit(_ sender: Any) {
        emailHintMessageLabel.isHidden = false
        passwordHintMessageLabel.isHidden = false
        let passwordIsEditing = passwordTextField.isEditing
        let EmailAddressIsEditing = emailAddressTextField.isEditing
        interactor?.verifyEmailPasswod(request: Verification.VerifyEmailPassword.Request(isEmailEntering: EmailAddressIsEditing, emailAddress: emailAddressTextField.text ?? "", isPasswordEntering: passwordIsEditing, password: passwordTextField.text ?? ""))
        
    }
    @IBAction func passwordTextFieldChanged(_ sender: Any) {
        emailHintMessageLabel.isHidden = true
        emailAddressLabel.textColor = UIColor(named: "SearchSectionTextColor")
        passwordLabel.textColor = UIColor(named: "SearchSectionTextColor")
        showButton.isHidden = false
        passwordTextField.becomeFirstResponder()
        let passwordIsEditing = passwordTextField.isEditing
        let EmailAddressIsEditing = emailAddressTextField.isEditing
        interactor?.verifyEmailPasswod(request: Verification.VerifyEmailPassword.Request(isEmailEntering: EmailAddressIsEditing, emailAddress: emailAddressTextField.text ?? "", isPasswordEntering: passwordIsEditing, password: passwordTextField.text ?? ""))
    }

    
    @IBAction func showButtonClick(_ sender: Any) {
        if clickButton == true{
            showButton.isEnabled = true
            showButton.setTitle("Hide", for: .normal)
            passwordTextField.isSecureTextEntry = false
        }else{
            showButton.setTitle("Show", for: .normal)
            passwordTextField.isSecureTextEntry = true
        }
        clickButton = !clickButton
    }
  
    
}


